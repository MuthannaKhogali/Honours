require('dotenv').config(); // loads environment variables from the .env file
const axios = require('axios'); // library for making HTTP requests
const express = require('express'); // web server framework
const cors = require('cors'); // added cors
const { getTranscript } = require('youtube-transcript-api'); // library for fetching YouTube video transcripts
const app = express();
const port = 3000; // port where the server is

// enables CORS for all routes
app.use(cors());

// gets the youtube transcript and throws errors depending on what it is
const getYouTubeTranscript = async (videoUrl) => {
    try {
        const videoId = new URL(videoUrl).searchParams.get('v'); // extracts the video ID from the URL
        if (!videoId) {
            throw new Error('Invalid URL');
        }
        const transcriptData = await getTranscript(videoId); // fetches the transcript using the video ID
        if (!transcriptData.length) {
            throw new Error('No captions available for this video.');
        }
        const transcript = transcriptData.map(item => item.text).join(' '); // joins transcript data into a single string
        return transcript;
    } catch (error) {
        throw new Error(error.message || 'Error extracting transcript.');
    }
};

// generates the questions
const generateQuestions = async (transcript) => {
    try {
        if (!transcript) {
            throw new Error('Transcript is empty.');
        }
        const response = await axios.post(
            `${process.env.GEMINI_API_URL}?key=${process.env.GEMINI_API_KEY}`, // sends the API key along with the request
            {
                // question to gemini
                contents: [{
                     parts: [{ 
                        text: `Read these subtitles: ${transcript}. Generate 5 multiple-choice questions.
                        The first thing you must do is find out what the general topic the video is talking about.
                        If the person making the video makes an obscure reference or example you must NOT ask about it.
                        You must also NOT ask questions about background knowledge and must be relevant to the general topic of the video.
                        Although these questions SHOULD relate to a video I do not want example questions that the video has went over to be generated.
                        If the video goes over an example question or example solution I want you to generate a new question similar to how it was done in the video.
                        Ofcourse this only relates to questions, somethings people want to memorises content from a video.
                        Make your own judgement for now whether to generate example questions that are similar to the video or questions that may test users memory from the video content. 
                        You may also include both type of questions.
                        Return a JSON list of multiple-choice questions. 
                        Each question should have a 'question' string, an 'options' array with four full-text answer choices, 
                        and an 'answer' string containing the exact matching full-text choice from the options array.` 
                }] 
            }]
            },
            {
                headers: { 'Content-Type': 'application/json' } // specifies the request payload format
            }
        );
        return response.data.candidates[0].content.parts[0].text; // returns the questions generated by the Gemini API
    } catch (error) {
        throw new Error('Error generating questions from Gemini API.');
    }
};


// endpoint to generate questions based on a YouTube video URL.
// fetches the transcript and sends it to the Gemini API for generating questions.
app.get('/generate-questions', async (req, res) => {
    const { videoUrl } = req.query;
    if (!videoUrl) {
        return res.status(400).json({ error: 'Video URL is required.' });
    }
    try {
        const transcript = await getYouTubeTranscript(videoUrl);
        const questions = await generateQuestions(transcript);
        res.json({ transcript, questions });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

// starts the server and listens on the specified port
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});

// exports functions for external use or testing purposes
module.exports = { getYouTubeTranscript, generateQuestions };
